{"ast":null,"code":"var _jsxFileName = \"/Users/anderskillander/WebDev/HyperProjects/Data-Interaction/StoryBlok-Portfolio/pages/[page].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\nimport Link from 'next/link';\n/* layout */\n\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\nimport AboutLayout from \"../components/layouts/AboutLayout\";\n/* components */\n\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from \"../components/modules/ImageModule\";\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\n\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\n\n\nconst SlugPage = ({\n  data\n}) => {\n  const {\n    content\n  } = data;\n  const headlineModuleData = content.body.find(item => item.component === \"Headline Module\");\n  const paragraphModuleData = content.body.find(item => item.component === \"Paragraph Module\");\n  const imageModuleData = content.body.find(item => item.component == 'Image Module');\n  const projectModuleData = content.body.find(item => item.component == 'Project Module');\n  console.log(`ðŸŒˆ I am getting this content from Storybok`);\n  console.log(content);\n  /* ---- */\n\n  return __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, headlineModuleData ? __jsx(HeadlineModule, {\n    title: headlineModuleData.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }) : null, paragraphModuleData ? __jsx(ParagraphModule, {\n    copy: paragraphModuleData.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }) : null, imageModuleData ? __jsx(ImageModule, {\n    copy: imageModuleData.copy,\n    image: imageModuleData.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }) : null, projectModuleData ? __jsx(ProjectModule, {\n    title: projectModuleData.title,\n    image: projectModuleData.image,\n    text: projectModuleData.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }) : null);\n};\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\n\n\nSlugPage.getInitialProps = async ({\n  query\n}) => {\n  /* {query} is an object we receive within this method from Next,\n  so that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const {\n    page\n  } = query;\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n  server-side (we are on client-side here) */\n\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n  /* Returning the data back into SlugPage as props */\n\n  return {\n    data\n  };\n  /* This is the same as { data: data } */\n};\n\nexport default SlugPage;","map":{"version":3,"sources":["/Users/anderskillander/WebDev/HyperProjects/Data-Interaction/StoryBlok-Portfolio/pages/[page].js"],"names":["fetch","Link","DefaultLayout","AboutLayout","HeadlineModule","ParagraphModule","ImageModule","fetchUrl","url","then","r","json","SlugPage","data","content","headlineModuleData","body","find","item","component","paragraphModuleData","imageModuleData","projectModuleData","console","log","title","text","copy","image","getInitialProps","query","page"],"mappings":";;;;AAAA;;AAEA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA;;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA;;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AAGA;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAOR,KAAK,CAACQ,GAAD,CAAL,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAArB,CAAP;AACD;AAED;;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAcD,IAApB;AACA,QAAME,kBAAkB,GAAGD,OAAO,CAACE,IAAR,CAAaC,IAAb,CACxBC,IAAD,IAAUA,IAAI,CAACC,SAAL,KAAmB,iBADJ,CAA3B;AAGA,QAAMC,mBAAmB,GAAGN,OAAO,CAACE,IAAR,CAAaC,IAAb,CACzBC,IAAD,IAAUA,IAAI,CAACC,SAAL,KAAmB,kBADH,CAA5B;AAGA,QAAME,eAAe,GAAGP,OAAO,CAACE,IAAR,CAAaC,IAAb,CAAmBC,IAAD,IAAUA,IAAI,CAACC,SAAL,IAAkB,cAA9C,CAAxB;AACA,QAAMG,iBAAiB,GAAGR,OAAO,CAACE,IAAR,CAAaC,IAAb,CAAmBC,IAAD,IAAUA,IAAI,CAACC,SAAL,IAAkB,gBAA9C,CAA1B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAa,4CAAb;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACA;;AACA,SAEE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGC,kBAAkB,GACjB,MAAC,cAAD;AAAgB,IAAA,KAAK,EAAEA,kBAAkB,CAACU,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADiB,GAEf,IALN,EAOGL,mBAAmB,GAClB,MAAC,eAAD;AAAiB,IAAA,IAAI,EAAEA,mBAAmB,CAACM,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADkB,GAEhB,IATN,EAWGL,eAAe,GACd,MAAC,WAAD;AAAa,IAAA,IAAI,EAAEA,eAAe,CAACM,IAAnC;AAAyC,IAAA,KAAK,EAAEN,eAAe,CAACO,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADc,GAC+D,IAZjF,EAcGN,iBAAiB,GAChB,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEA,iBAAiB,CAACG,KAAxC;AAA+C,IAAA,KAAK,EAAEH,iBAAiB,CAACM,KAAxE;AAA+E,IAAA,IAAI,EAAEN,iBAAiB,CAACI,IAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB,GACmG,IAfvH,CAFF;AAsBD,CAnCD;AAsCA;;;;AAEAd,QAAQ,CAACiB,eAAT,GAA2B,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC9C;;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAjB;AACA;;;AAEA,QAAMjB,IAAI,GAAG,MAAMN,QAAQ,CAAE,kCAAiCwB,IAAK,EAAxC,CAA3B;AACA;;AACA,SAAO;AAAElB,IAAAA;AAAF,GAAP;AAAiB;AAClB,CATD;;AAWA,eAAeD,QAAf","sourcesContent":["/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\nimport Link from 'next/link';\n/* layout */\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\nimport AboutLayout from \"../components/layouts/AboutLayout\"\n/* components */\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from \"../components/modules/ImageModule\";\n\n\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\nconst SlugPage = ({ data }) => {\n  const { content } = data;\n  const headlineModuleData = content.body.find(\n    (item) => item.component === \"Headline Module\"\n  );\n  const paragraphModuleData = content.body.find(\n    (item) => item.component === \"Paragraph Module\"\n  );\n  const imageModuleData = content.body.find((item) => item.component == 'Image Module');\n  const projectModuleData = content.body.find((item) => item.component == 'Project Module');\n  console.log(`ðŸŒˆ I am getting this content from Storybok`);\n  console.log(content);\n  /* ---- */\n  return (\n\n    <DefaultLayout>\n\n\n      {headlineModuleData ? (\n        <HeadlineModule title={headlineModuleData.title} />\n      ) : null}\n\n      {paragraphModuleData ? (\n        <ParagraphModule copy={paragraphModuleData.text} />\n      ) : null}\n\n      {imageModuleData ? (\n        <ImageModule copy={imageModuleData.copy} image={imageModuleData.image} />) : null}\n\n      {projectModuleData ? (\n        <ProjectModule title={projectModuleData.title} image={projectModuleData.image} text={projectModuleData.text} />) : null}\n    </DefaultLayout>\n\n\n  );\n};\n\n\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\nSlugPage.getInitialProps = async ({ query }) => {\n  /* {query} is an object we receive within this method from Next,\n\tso that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const { page } = query;\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n\tserver-side (we are on client-side here) */\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n  /* Returning the data back into SlugPage as props */\n  return { data }; /* This is the same as { data: data } */\n};\n\nexport default SlugPage;"]},"metadata":{},"sourceType":"module"}