{"ast":null,"code":"var _jsxFileName = \"/Users/anderskillander/WebDev/HyperProjects/Data-Interaction/StoryBlok-Portfolio/pages/blog.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n/* layout */\n\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n/* components */\n\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\n\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\n\n\nconst BlogPage = ({\n  data\n}) => {\n  const {\n    content\n  } = data;\n  const paragraphModuleData = content.body.find(item => item.component === \"Paragraph Module\");\n  console.log(`ðŸŒˆ I am getting this content from Storybok`);\n  console.log(content);\n  /* ---- */\n\n  return __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, paragraphModuleData ? __jsx(ParagraphModule, {\n    copy: paragraphModuleData.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }) : null);\n};\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\n\n\nSlugPage.getInitialProps = async ({\n  query\n}) => {\n  /* {query} is an object we receive within this method from Next,\n    so that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const {\n    page\n  } = query;\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n    server-side (we are on client-side here) */\n\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n  /* Returning the data back into SlugPage as props */\n\n  return {\n    data\n  };\n  /* This is the same as { data: data } */\n};\n\nexport default BlogPage;","map":{"version":3,"sources":["/Users/anderskillander/WebDev/HyperProjects/Data-Interaction/StoryBlok-Portfolio/pages/blog.js"],"names":["fetch","DefaultLayout","ParagraphModule","fetchUrl","url","then","r","json","BlogPage","data","content","paragraphModuleData","body","find","item","component","console","log","text","SlugPage","getInitialProps","query","page"],"mappings":";;;;AAAA;;AAEA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA;;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAEA;;AAEA,OAAOC,eAAP,MAA4B,uCAA5B;AAIA;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACnB,SAAOJ,KAAK,CAACI,GAAD,CAAL,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAArB,CAAP;AACH;AAED;;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAcD,IAApB;AACA,QAAME,mBAAmB,GAAGD,OAAO,CAACE,IAAR,CAAaC,IAAb,CACxBC,IAAI,IAAIA,IAAI,CAACC,SAAL,KAAmB,kBADH,CAA5B;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAa,4CAAb;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACA;;AACA,SACI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKC,mBAAmB,GAChB,MAAC,eAAD;AAAiB,IAAA,IAAI,EAAEA,mBAAmB,CAACO,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB,GAEhB,IAJR,CADJ;AAQH,CAjBD;AAmBA;;;;AAEAC,QAAQ,CAACC,eAAT,GAA2B,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC5C;;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAjB;AACA;;;AAEA,QAAMZ,IAAI,GAAG,MAAMN,QAAQ,CAAE,kCAAiCmB,IAAK,EAAxC,CAA3B;AACA;;AACA,SAAO;AAAEb,IAAAA;AAAF,GAAP;AAAiB;AACpB,CATD;;AAWA,eAAeD,QAAf","sourcesContent":["/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n/* layout */\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n\n/* components */\n\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\n\n\n\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\nfunction fetchUrl(url) {\n    return fetch(url).then(r => r.json());\n}\n\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\nconst BlogPage = ({ data }) => {\n    const { content } = data;\n    const paragraphModuleData = content.body.find(\n        item => item.component === \"Paragraph Module\"\n    );\n\n    console.log(`ðŸŒˆ I am getting this content from Storybok`);\n    console.log(content);\n    /* ---- */\n    return (\n        <DefaultLayout>\n            {/* <h3>This is what you are getting back from Storyblok:</h3> */}\n            {paragraphModuleData ? (\n                <ParagraphModule copy={paragraphModuleData.text} />\n            ) : null}\n        </DefaultLayout>\n    );\n};\n\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\nSlugPage.getInitialProps = async ({ query }) => {\n    /* {query} is an object we receive within this method from Next,\n      so that we can retrieve the slug (e.g. '/welcome') coming with the route */\n    const { page } = query;\n    /* Calling our internal api endpoint so that we can fetch Storyblok content\n      server-side (we are on client-side here) */\n    const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n    /* Returning the data back into SlugPage as props */\n    return { data }; /* This is the same as { data: data } */\n};\n\nexport default BlogPage;"]},"metadata":{},"sourceType":"module"}