{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/anderskillander/WebDev/HyperProjects/Data-Interaction/StoryBlok-Portfolio/pages/[page].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\nimport Link from 'next/link';\n/* layout */\n\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\nimport AboutLayout from \"../components/layouts/AboutLayout\";\n/* components */\n\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from \"../components/modules/ImageModule\";\nimport ProjectModule from \"../components/modules/ProjectModule\";\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\n\nfunction fetchUrl(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\n\n\nvar SlugPage = function SlugPage(_ref) {\n  var data = _ref.data;\n  var content = data.content;\n  var headlineModuleData = content.body.find(function (item) {\n    return item.component === \"Headline Module\";\n  });\n  var paragraphModuleData = content.body.find(function (item) {\n    return item.component === \"Paragraph Module\";\n  });\n  var imageModuleData = content.body.find(function (item) {\n    return item.component == 'Image Module';\n  });\n  var projectModuleData = content.body.find(function (item) {\n    return item.component == 'Project Module';\n  });\n  console.log(\"\\uD83C\\uDF08 I am getting this content from Storybok\");\n  console.log(content);\n  /* ---- */\n\n  return __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, headlineModuleData ? __jsx(HeadlineModule, {\n    title: headlineModuleData.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }) : null, paragraphModuleData ? __jsx(ParagraphModule, {\n    copy: paragraphModuleData.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }) : null, imageModuleData ? __jsx(ImageModule, {\n    copy: imageModuleData.copy,\n    image: imageModuleData.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }) : null, projectModuleData ? __jsx(ProjectModule, {\n    title: projectModuleData.title,\n    image: projectModuleData.image,\n    text: projectModuleData.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }) : null, projectModuleData ? __jsx(ProjectModule, {\n    title: projectModuleData.title,\n    image: projectModuleData.image,\n    text: projectModuleData.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }) : null);\n};\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\n\n\nSlugPage.getInitialProps = function _callee(_ref2) {\n  var query, page, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref2.query;\n\n          /* {query} is an object we receive within this method from Next,\n          so that we can retrieve the slug (e.g. '/welcome') coming with the route */\n          page = query.page;\n          /* Calling our internal api endpoint so that we can fetch Storyblok content\n          server-side (we are on client-side here) */\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetchUrl(\"http://localhost:3000/api/page/\".concat(page)));\n\n        case 4:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default SlugPage;","map":{"version":3,"sources":["/Users/anderskillander/WebDev/HyperProjects/Data-Interaction/StoryBlok-Portfolio/pages/[page].js"],"names":["fetch","Link","DefaultLayout","AboutLayout","HeadlineModule","ParagraphModule","ImageModule","ProjectModule","fetchUrl","url","then","r","json","SlugPage","data","content","headlineModuleData","body","find","item","component","paragraphModuleData","imageModuleData","projectModuleData","console","log","title","text","copy","image","getInitialProps","query","page"],"mappings":"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","sourcesContent":["/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\nimport Link from 'next/link';\n/* layout */\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\nimport AboutLayout from \"../components/layouts/AboutLayout\"\n/* components */\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from \"../components/modules/ImageModule\";\nimport ProjectModule from \"../components/modules/ProjectModule\";\n\n\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\nconst SlugPage = ({ data }) => {\n  const { content } = data;\n  const headlineModuleData = content.body.find(\n    (item) => item.component === \"Headline Module\"\n  );\n  const paragraphModuleData = content.body.find(\n    (item) => item.component === \"Paragraph Module\"\n  );\n  const imageModuleData = content.body.find((item) => item.component == 'Image Module');\n\n  const projectModuleData = content.body.find((item) => item.component == 'Project Module');\n  console.log(`ðŸŒˆ I am getting this content from Storybok`);\n  console.log(content);\n  /* ---- */\n  return (\n\n    <DefaultLayout>\n\n\n      {headlineModuleData ? (\n        <HeadlineModule title={headlineModuleData.title} />\n      ) : null}\n\n      {paragraphModuleData ? (\n        <ParagraphModule copy={paragraphModuleData.text} />\n      ) : null}\n\n      {imageModuleData ? (\n        <ImageModule copy={imageModuleData.copy} image={imageModuleData.image} />) : null}\n\n      {projectModuleData ? (\n        <ProjectModule title={projectModuleData.title} image={projectModuleData.image} text={projectModuleData.text} />) : null}\n      {projectModuleData ? (\n        <ProjectModule title={projectModuleData.title} image={projectModuleData.image} text={projectModuleData.text} />) : null}\n\n    </DefaultLayout>\n\n\n  );\n};\n\n\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\nSlugPage.getInitialProps = async ({ query }) => {\n  /* {query} is an object we receive within this method from Next,\n\tso that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const { page } = query;\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n\tserver-side (we are on client-side here) */\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n  /* Returning the data back into SlugPage as props */\n  return { data }; /* This is the same as { data: data } */\n};\n\nexport default SlugPage;"]},"metadata":{},"sourceType":"module"}